trips_summary_daily_weather(yearmonth: string) := {

FROM `github://raw-labs/demos/1/public/weather/weather.rql` 
  IMPORT weather_history_daily;
FROM `github://raw-labs/demos/1/public/nyc-transit/trips.rql` 
  IMPORT trips;

SELECT 
  t.date, 
  t.yellow + t.green + t.uber + t.lyft + t.via + t.fhv_other as cabs,
  t.mta_bus + t.mta_accessaride as busses,
  t.mta_subway + t.mta_lirr + t.mta_metronorth as trains,
  w.temp,
  w.tempmax,
  w.tempmin,
  w.precip, 
  w.feelslike,
  w.feelslikemax, 
  w.feelslikemin,
  w.snow,
  w.snowdepth
FROM
  trips(yearmonth) t,
  weather_history_daily("manhattan", yearmonth) w
 WHERE 
  t.date = w.date
ORDER BY t.date

};


hourly_cab_trips_weather(yearmonth: string) := {
// get yellow and green cab trips for one month, group by hour of pickup
// join to weather for that date + hour

FROM `github://raw-labs/demos/1/public/weather/weather.rql`
  IMPORT weather_history_hourly;
    
y_str := substring(yearmonth,1,4);
m_str := substring(yearmonth,6,2);

// typealias needed as dynamically generated source structure 
// can't be inferred, plus there's bad dates in the file
typealias t := record(VendorID: string, tpep_pickup_datetime: string,
  tpep_dropoff_datetime: string,passenger_count: string,
  trip_distance: string,RatecodeID: string,store_and_fwd_flag: string,PULocationID: string,
  DOLocationID: string, payment_type: string,fare_amount: string,extra: string,mta_tax: string,
  tip_amount: string,tolls_amount: string,improvement_surcharge: string,total_amount: string,
  congestion_surcharge: string);

 
all_cab_trips := 
  READ_CSV[t]("https://nyc-tlc.s3.amazonaws.com/trip+data/yellow_tripdata_" + 
    y_str + "-" + m_str + ".csv", cache:=interval "10 days")
  UNION ALL
  READ_CSV[t]("https://nyc-tlc.s3.amazonaws.com/trip+data/green_tripdata_" + 
    y_str + "-" + m_str + ".csv", cache:=interval "10 days");

 hourly_cab_trips:=
 SELECT 
   pickup_hour,
    count(*) as num_trips,
    avg(unix_timestamp(to_timestamp(tpep_dropoff_datetime,"yyyy-MM-dd H:m:s")) - 
      unix_timestamp(to_timestamp(tpep_pickup_datetime,"yyyy-MM-dd H:m:s"))) as avg_duration,
    round(avg(try_cast(trip_distance as double)),2) as avg_dist, 
    round(avg(try_cast(fare_amount as double)),2) as avg_cab_fare,
    round(avg(try_cast(total_amount as double)),2) as avg_amount_paid
  FROM 
    all_cab_trips
  WHERE tpep_pickup_datetime like y_str + "-" + m_str + "%" // filter bad dates out 
  GROUP BY date_trunc("hour", to_timestamp(tpep_pickup_datetime,"yyyy-MM-dd H:m:s")) as pickup_hour
  ORDER BY pickup_hour;

  SELECT
    c.pickup_hour, c.avg_duration, c.avg_dist,  
    c.avg_cab_fare, c.avg_amount_paid, c.num_trips, w.precip, w.temp, 
    w.feelslike, w.snow, w.snowdepth, w.windspeed
  FROM
    hourly_cab_trips c,
    weather_history_hourly("manhattan", yearmonth) w
  WHERE
    c.pickup_hour = w.datehour  
};