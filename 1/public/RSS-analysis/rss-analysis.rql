FROM `github://raw-labs/lib/1/public/google.com/language.rql`
    IMPORT analyze_entities;

FROM `github://raw-labs/lib/1/public/opengraph.io/opengraph.rql`
    IMPORT site;

FROM `github://raw-labs/lib/1/public/raw-labs.com/rss.rql`
    IMPORT read_rss;

rss_analysis(url: string) := {

  // gets metadata from opengraph.io, reading RSS feed 
  get_rss_link_metadata(url: string) := {
    SELECT 
      rss_item.link,
      rss_item.title,
      rss_item.pubDate,
      replace(
        site(
          url:=rss_item.link,
          key:=secret("opengraph.io")
        ).hybridGraph.description, "\"","'"
      ) as description 
    FROM 
      read_rss(url:=url, cache:= interval "1 hour").channel.item as rss_item
    WHERE
      to_timestamp ( substring(rss_item.pubDate,1,25) , 
                    "eee, dd MMM yyyy HH:mm:ss") > 
                    DATE_TRUNC("hour", current_timestamp()) - interval "24 hours"
    ORDER BY 3 DESC
  };

  // call Google's API to perform entity extraction
  data := 
    SELECT 
      link,
      title,
      description,
      analyze_entities( 
        key:= secret("language.google.com") , 
        content:=mkstring( [title, description] , " - "), 
        type:="PLAIN_TEXT"
      ) as analysis
    FROM get_rss_link_metadata(url);


  // Sum up the results across all stories in the RSS feed.
  SELECT 
    name as entity_name, 
    `type` as entity_type,
    metadata.wikipedia_url as wikipedia_url,
    SUM(e.salience) as total_salience, 
    COUNT(*) as story_count,
    (SELECT DISTINCT d.link FROM PARTITION) as stories,
    (SELECT COUNT(m) FROM PARTITION, e.mentions m) as mention_count // mentions are nested
  FROM 
    data d, 
    d.analysis.entities e
  WHERE 
    e.`type` in ["PERSON", "LOCATION", "ORGANIZATION",
                "EVENT","WORK_OF_ART","CONSUMER_GOOD"]
  GROUP BY 
    e.name, 
    e.`type`,
    e.metadata
  ORDER BY 
    COUNT(*) DESC
};
