nyc_trips(yearmonth: string) := {
    
y_str := substring(yearmonth,1,4);
m_str := substring(yearmonth,6,2);

// typealias needed as dynamically generated source structure 
// can't be inferred, plus there's bad dates in the file
typealias t := record(`VendorID`: string,`tpep_pickup_datetime`: string,`tpep_dropoff_datetime`: string,`passenger_count`: string,`trip_distance`: string,`RatecodeID`: string,`store_and_fwd_flag`: string,`PULocationID`: string,`DOLocationID`: string,`payment_type`: string,`fare_amount`: string,`extra`: string,`mta_tax`: string,`tip_amount`: string,`tolls_amount`: string,`improvement_surcharge`: string,`total_amount`: string,`congestion_surcharge`: string);

//Yellow Taxi Trip Records
taxi_yellow := select pickup_dt, count(*) as yellow
from 
READ_CSV[t]("https://nyc-tlc.s3.amazonaws.com/trip+data/yellow_tripdata_" + y_str + "-" + m_str + ".csv", cache:=interval "10 days")
where tpep_pickup_datetime like y_str + "-" + m_str + "%" // filter bad dates out
group by to_date(substring(tpep_pickup_datetime,1,10),"yyyy-MM-dd") as pickup_dt;

//Green Taxi Trip Records

taxi_green := select pickup_dt, count(*) as green
from 
READ_CSV[t]("https://nyc-tlc.s3.amazonaws.com/trip+data/green_tripdata_" + y_str + "-" + m_str + ".csv", cache:=interval "10 days")
where tpep_pickup_datetime like y_str + "-" + m_str + "%" // filter bad dates out
group by to_date(substring(tpep_pickup_datetime,1,10),"yyyy-MM-dd") as pickup_dt;

//For Hire Vehicle Trips - High Volume (Uber, Lift, Via)

//typealias - different structure
typealias tf := record(`hvfhs_license_num`: string,`dispatching_base_num`: string,`pickup_datetime`: string,`dropoff_datetime`: string,`PULocationID`: string,`DOLocationID`: string,`SR_Flag`: string nullable);

fhv_hv := select pickup_dt, 
  SUM(CASE WHEN hvfhs_license_num = "HV0003" THEN 1 ELSE 0 END) as uber,
  SUM(CASE WHEN hvfhs_license_num = "HV0004" THEN 1 ELSE 0 END) as via,
  SUM(CASE WHEN hvfhs_license_num = "HV0005" THEN 1 ELSE 0 END) as lyft
from 
READ_CSV[tf]("https://nyc-tlc.s3.amazonaws.com/trip+data/fhvhv_tripdata_" + y_str + "-" + m_str + ".csv", cache:=interval "10 days")
where pickup_datetime like y_str + "-" + m_str + "%" // filter bad dates out
GROUP BY to_date(substring(pickup_datetime,1,10),"yyyy-MM-dd") as pickup_dt;

//For Hire Vehicle Trips - Others (limos, etc.)
// typealias - different structure again 

typealias to := record(`dispatching_base_num`: string,`pickup_datetime`: string,`dropoff_datetime`: string,`PULocationID`: string nullable,`DOLocationID`: string nullable,`SR_Flag`: string nullable,`Affiliated_base_number`: string nullable);

fhv_other := select pickup_dt, count(*) as fhv_other 
    from READ_CSV[to]("https://nyc-tlc.s3.amazonaws.com/trip+data/fhv_tripdata_" + y_str + "-" + m_str + ".csv", cache:=interval "10 days") 
    where pickup_datetime like y_str + "-" + m_str + "%" // filter bad dates out 
    GROUP BY to_date(substring(pickup_datetime,1,10),"yyyy-MM-dd") as pickup_dt 

// MTA data, daily ridership. Data is dirty and needs cleaning
mta := SELECT 
  to_date(Date,"M/d/yyyy") as date, 
  `Subways: Total Estimated Ridership` as mta_subway,
  `Buses: Total Estimated Ridership` as mta_bus,
  `LIRR: Total Estimated Ridership` as mta_lirr,
  `Metro-North: Total Estimated Ridership` as mta_metronorth,
  `Access-A-Ride: Total Scheduled Trips` as mta_accessaride
FROM 
  READ_CSV("https://new.mta.info/document/20441", cache:= interval "1 day", has_header:=true, nulls:=["N/A","TBD"]) 
WHERE year(to_date(Date,"M/d/yyyy")) = cast(y_str as int) AND 
  month(to_date(Date,"M/d/yyyy")) = cast(m_str as int)
   
// return the join of the datasets

select m.date, m.mta_subway, m.mta_bus, m.mta_lirr, m.mta_metronorth, m.mta_accessaride, y.yellow, g.green, h.uber, h.lyft, h.via, o.fhv_other
from
 mta m, taxi_yellow y, taxi_green g, fhv_other o, fhv_hv h
where
  m.date = y.pickup_dt and
  m.date = g.pickup_dt and
  m.date = o.pickup_dt and
  m.date = h.pickup_dt
order by m.date
    
};
