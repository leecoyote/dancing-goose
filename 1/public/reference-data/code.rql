// We adopt a standard 3 Layer technique used in data warehousing 
// and data virtualisation tools:
// 1. RAW Layer
// 2. MODEL Layer
// 3. CONSUMPTION Layer



// Layer 1: The RAW (Staging or Input) Layer
 

languages_raw := 
    SELECT Id, Part2B, Part2T, Part1, Scope, Language_Type, Ref_Name, Comment 
    FROM READ("https://iso639-3.sil.org/sites/iso639-3/files/downloads/iso-639-3.tab");

    
// now for countries


country_raw := 
    SELECT 
      FIFA,Dial,`ISO3166-1-Alpha-3`,MARC,is_independent,`ISO3166-1-numeric`,GAUL,FIPS,WMO,`ISO3166-1-Alpha-2`,ITU,IOC,DS,`UNTERM Spanish Formal`,`Global Code`,`Intermediate Region Code`,official_name_fr,`UNTERM French Short`,`ISO4217-currency_name`,`Developed / Developing Countries`,`UNTERM Russian Formal`,`UNTERM English Short`,`ISO4217-currency_alphabetic_code`,`Small Island Developing States (SIDS)`,`UNTERM Spanish Short`,`ISO4217-currency_numeric_code`,`UNTERM Chinese Formal`,`UNTERM French Formal`,`UNTERM Russian Short`,M49,`Sub-region Code`,`Region Code`,official_name_ar,`ISO4217-currency_minor_unit`,`UNTERM Arabic Formal`,`UNTERM Chinese Short`,`Land Locked Developing Countries (LLDC)`,`Intermediate Region Name`,official_name_es,`UNTERM English Formal`,official_name_cn,official_name_en,`ISO4217-currency_country_name`,`Least Developed Countries (LDC)`,`Region Name`,`UNTERM Arabic Short`,`Sub-region Name`,official_name_ru,`Global Name`,Capital,Continent,TLD,Languages,`Geoname ID`,`CLDR display name`,EDGAR
    FROM 
      read_csv("https://datahub.io/core/country-codes/r/country-codes.csv", has_header:=true );

        
// and currencies (this one is XML)

currency_raw := READ("https://www.six-group.com/dam/download/financial-information/data-center/iso-currrency/lists/list_one.xml");
        
        
// Layer 2: the MODEL (Normalization) Layer
    


countries := 
  SELECT 
    `ISO3166-1-Alpha-3` as iso3166_1_alpha_3, 
    `ISO3166-1-Alpha-2` as iso3166_1_alpha_2,
    `ISO3166-1-numeric` as iso3166_1_numeric,
    official_name_en , 
    `ISO4217-currency_alphabetic_code` as official_iso4217_currency,
    `Sub-region Name` as sub_region_name,
    `Region Name` as region_name,
    Capital as capital_city,
    Continent as continent_code,
    split (Languages,",") as languages,
    Dial as `international_dial_code`
  FROM
    country_raw;

currencies_countries :=
    SELECT 
      x.Ccy as iso4217_currency_code,
      x.CcyNbr as iso4217_currency_num,
      x.CcyNm.`#text` as currency_name,
      isnull(x.CcyNm.`@IsFund`,false) as is_fund_currency,
      x.CtryNm as country_name
    FROM 
      currency_raw.CcyTbl.CcyNtry As x
      


languages :=
    SELECT 
      Part1 as iso639_1_lang_code,
      Language_Type as language_type,
    Ref_Name as language_name 
    FROM languages_raw
    where Part1 is not null
  

//
// Layer 3: this is the consumption (API) layer
//

    
all_countries() := { 
    select 
      iso3166_1_alpha_3,
      iso3166_1_alpha_2,
      iso3166_1_numeric,
      official_name_en,
      official_iso4217_currency,
      capital_city,
      continent_code,
      region_name,
      sub_region_name,
      international_dial_code,
      languages
    from 
      countries
};
     
iso_countries :=  
    select 
      iso3166_1_alpha_3,
      iso3166_1_alpha_2,
      iso3166_1_numeric,
      official_name_en,
      official_iso4217_currency,
      capital_city,
      continent_code,
      region_name,
      sub_region_name,
      international_dial_code,
      languages
    from 
      countries 
    where 
      iso3166_1_alpha_3 is not null;

iso_only_countries() := {
    iso_countries
};


country_by_iso(iso: string) := {
  select 
      iso3166_1_alpha_3,
      iso3166_1_alpha_2,
      iso3166_1_numeric,
      official_name_en,
      official_iso4217_currency,
      capital_city,
      continent_code,
      region_name,
      sub_region_name,
      international_dial_code,
      languages
  from 
      iso_countries
  where 
     lower(iso3166_1_alpha_3) = lower(iso) OR 
     lower(iso3166_1_alpha_2) = lower(iso) OR
     lower(iso3166_1_numeric) = lower(iso)
};

countries_by_region(region: string) := {
  select
    iso3166_1_alpha_3,
    iso3166_1_alpha_2,
    iso3166_1_numeric,
    official_name_en,
    official_iso4217_currency,
    capital_city,
    continent_code,
    region_name,
    sub_region_name,
    international_dial_code,
    languages
  from iso_countries 
  where region_name = region
};
    
languages_by_country(iso: string) := {
  select 
      languages as lang_code 
  from 
      country_by_iso(iso)
};

all_languages() := {
    select 
      iso639_1_lang_code as lang_code,
      language_name as lang_name
    from
      languages
};

regions() := {
    select distinct region_name as region_name
    from countries
    where region_name is not null
};
    
all_currencies() := {
    select distinct
      iso4217_currency_code,
      iso4217_currency_num,
      currency_name
    from currencies_countries
      where iso4217_currency_code is not null
};

fund_currencies() := {
    select distinct
      iso4217_currency_code,
      iso4217_currency_num,
      currency_name
    from currencies_countries
      where iso4217_currency_code is not null
      and is_fund_currency is true
};
    
national_currencies() := {
    select distinct
      iso4217_currency_code,
      iso4217_currency_num,
      currency_name
    from currencies_countries
      where iso4217_currency_code in ( select official_iso4217_currency from countries )
};

countries_for_currency(currency_iso: string) := {
    select * from countries
      where official_iso4217_currency = currency_iso
};
